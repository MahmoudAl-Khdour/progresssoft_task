// Mocks generated by Mockito 5.4.4 from annotations
// in progresssoft_task/test/features/auth/helper/test_main_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:typed_data' as _i13;

import 'package:cloud_firestore/cloud_firestore.dart' as _i7;
import 'package:cloud_firestore_platform_interface/cloud_firestore_platform_interface.dart'
    as _i6;
import 'package:dartz/dartz.dart' as _i2;
import 'package:firebase_auth/firebase_auth.dart' as _i5;
import 'package:firebase_auth_platform_interface/firebase_auth_platform_interface.dart'
    as _i4;
import 'package:firebase_core/firebase_core.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;
import 'package:progresssoft_task/core/error/failures.dart' as _i10;
import 'package:progresssoft_task/core/utils/repository/app_repository.dart'
    as _i18;
import 'package:progresssoft_task/features/app/domian/entites/countries_entity.dart'
    as _i19;
import 'package:progresssoft_task/features/app/domian/entites/validators.dart'
    as _i20;
import 'package:progresssoft_task/features/auth/domain/entites/user_info.dart'
    as _i11;
import 'package:progresssoft_task/features/auth/domain/repositories/user_repository.dart'
    as _i9;
import 'package:progresssoft_task/features/auth/domain/usecases/auth_phone_number.dart'
    as _i14;
import 'package:progresssoft_task/features/auth/domain/usecases/create_user.dart'
    as _i15;
import 'package:progresssoft_task/features/auth/domain/usecases/sign_in.dart'
    as _i16;
import 'package:progresssoft_task/features/auth/domain/usecases/verify_otp_code.dart'
    as _i17;
import 'package:progresssoft_task/features/main/domain/entites/posts.dart'
    as _i21;
import 'package:shared_preferences/shared_preferences.dart' as _i22;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseApp_1 extends _i1.SmartFake implements _i3.FirebaseApp {
  _FakeFirebaseApp_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeActionCodeInfo_2 extends _i1.SmartFake
    implements _i4.ActionCodeInfo {
  _FakeActionCodeInfo_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserCredential_3 extends _i1.SmartFake
    implements _i5.UserCredential {
  _FakeUserCredential_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfirmationResult_4 extends _i1.SmartFake
    implements _i5.ConfirmationResult {
  _FakeConfirmationResult_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSettings_5 extends _i1.SmartFake implements _i6.Settings {
  _FakeSettings_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollectionReference_6<T extends Object?> extends _i1.SmartFake
    implements _i7.CollectionReference<T> {
  _FakeCollectionReference_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWriteBatch_7 extends _i1.SmartFake implements _i7.WriteBatch {
  _FakeWriteBatch_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoadBundleTask_8 extends _i1.SmartFake
    implements _i7.LoadBundleTask {
  _FakeLoadBundleTask_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuerySnapshot_9<T1 extends Object?> extends _i1.SmartFake
    implements _i7.QuerySnapshot<T1> {
  _FakeQuerySnapshot_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuery_10<T extends Object?> extends _i1.SmartFake
    implements _i7.Query<T> {
  _FakeQuery_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentReference_11<T extends Object?> extends _i1.SmartFake
    implements _i7.DocumentReference<T> {
  _FakeDocumentReference_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_12<T1> extends _i1.SmartFake implements _i8.Future<T1> {
  _FakeFuture_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserRepository_13 extends _i1.SmartFake
    implements _i9.UserRepository {
  _FakeUserRepository_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSnapshotMetadata_14 extends _i1.SmartFake
    implements _i7.SnapshotMetadata {
  _FakeSnapshotMetadata_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i9.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Either<_i10.Failure, _i2.Unit>> createUser(
          {required _i11.UserInfo? userInfo}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [],
          {#userInfo: userInfo},
        ),
        returnValue: _i8.Future<_i2.Either<_i10.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i10.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #createUser,
            [],
            {#userInfo: userInfo},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i10.Failure, _i2.Unit>>);

  @override
  _i8.Future<_i2.Either<_i10.Failure, _i2.Unit>> phoneNumberAuthentication(
          {required String? phoneNumber}) =>
      (super.noSuchMethod(
        Invocation.method(
          #phoneNumberAuthentication,
          [],
          {#phoneNumber: phoneNumber},
        ),
        returnValue: _i8.Future<_i2.Either<_i10.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i10.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #phoneNumberAuthentication,
            [],
            {#phoneNumber: phoneNumber},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i10.Failure, _i2.Unit>>);

  @override
  _i8.Future<_i2.Either<_i10.Failure, _i2.Unit>> verifyOTP(
          {required String? otpCode}) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyOTP,
          [],
          {#otpCode: otpCode},
        ),
        returnValue: _i8.Future<_i2.Either<_i10.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i10.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #verifyOTP,
            [],
            {#otpCode: otpCode},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i10.Failure, _i2.Unit>>);

  @override
  _i8.Future<_i2.Either<_i10.Failure, _i11.UserInfo>> signIn({
    required String? phoneNumber,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [],
          {
            #phoneNumber: phoneNumber,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i10.Failure, _i11.UserInfo>>.value(
            _FakeEither_0<_i10.Failure, _i11.UserInfo>(
          this,
          Invocation.method(
            #signIn,
            [],
            {
              #phoneNumber: phoneNumber,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i10.Failure, _i11.UserInfo>>);
}

/// A class which mocks [FirebaseAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuth extends _i1.Mock implements _i5.FirebaseAuth {
  MockFirebaseAuth() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_1(
          this,
          Invocation.getter(#app),
        ),
      ) as _i3.FirebaseApp);

  @override
  set app(_i3.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set tenantId(String? tenantId) => super.noSuchMethod(
        Invocation.setter(
          #tenantId,
          tenantId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set customAuthDomain(String? customAuthDomain) => super.noSuchMethod(
        Invocation.setter(
          #customAuthDomain,
          customAuthDomain,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i8.Future<void> useAuthEmulator(
    String? host,
    int? port, {
    bool? automaticHostMapping = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #useAuthEmulator,
          [
            host,
            port,
          ],
          {#automaticHostMapping: automaticHostMapping},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> applyActionCode(String? code) => (super.noSuchMethod(
        Invocation.method(
          #applyActionCode,
          [code],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i4.ActionCodeInfo> checkActionCode(String? code) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkActionCode,
          [code],
        ),
        returnValue: _i8.Future<_i4.ActionCodeInfo>.value(_FakeActionCodeInfo_2(
          this,
          Invocation.method(
            #checkActionCode,
            [code],
          ),
        )),
      ) as _i8.Future<_i4.ActionCodeInfo>);

  @override
  _i8.Future<void> confirmPasswordReset({
    required String? code,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #confirmPasswordReset,
          [],
          {
            #code: code,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i5.UserCredential> createUserWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUserWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i5.UserCredential>.value(_FakeUserCredential_3(
          this,
          Invocation.method(
            #createUserWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i5.UserCredential>);

  @override
  _i8.Future<List<String>> fetchSignInMethodsForEmail(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchSignInMethodsForEmail,
          [email],
        ),
        returnValue: _i8.Future<List<String>>.value(<String>[]),
      ) as _i8.Future<List<String>>);

  @override
  _i8.Future<_i5.UserCredential> getRedirectResult() => (super.noSuchMethod(
        Invocation.method(
          #getRedirectResult,
          [],
        ),
        returnValue: _i8.Future<_i5.UserCredential>.value(_FakeUserCredential_3(
          this,
          Invocation.method(
            #getRedirectResult,
            [],
          ),
        )),
      ) as _i8.Future<_i5.UserCredential>);

  @override
  bool isSignInWithEmailLink(String? emailLink) => (super.noSuchMethod(
        Invocation.method(
          #isSignInWithEmailLink,
          [emailLink],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i8.Stream<_i5.User?> authStateChanges() => (super.noSuchMethod(
        Invocation.method(
          #authStateChanges,
          [],
        ),
        returnValue: _i8.Stream<_i5.User?>.empty(),
      ) as _i8.Stream<_i5.User?>);

  @override
  _i8.Stream<_i5.User?> idTokenChanges() => (super.noSuchMethod(
        Invocation.method(
          #idTokenChanges,
          [],
        ),
        returnValue: _i8.Stream<_i5.User?>.empty(),
      ) as _i8.Stream<_i5.User?>);

  @override
  _i8.Stream<_i5.User?> userChanges() => (super.noSuchMethod(
        Invocation.method(
          #userChanges,
          [],
        ),
        returnValue: _i8.Stream<_i5.User?>.empty(),
      ) as _i8.Stream<_i5.User?>);

  @override
  _i8.Future<void> sendPasswordResetEmail({
    required String? email,
    _i4.ActionCodeSettings? actionCodeSettings,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendPasswordResetEmail,
          [],
          {
            #email: email,
            #actionCodeSettings: actionCodeSettings,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> sendSignInLinkToEmail({
    required String? email,
    required _i4.ActionCodeSettings? actionCodeSettings,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendSignInLinkToEmail,
          [],
          {
            #email: email,
            #actionCodeSettings: actionCodeSettings,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setLanguageCode(String? languageCode) => (super.noSuchMethod(
        Invocation.method(
          #setLanguageCode,
          [languageCode],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setSettings({
    bool? appVerificationDisabledForTesting = false,
    String? userAccessGroup,
    String? phoneNumber,
    String? smsCode,
    bool? forceRecaptchaFlow,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSettings,
          [],
          {
            #appVerificationDisabledForTesting:
                appVerificationDisabledForTesting,
            #userAccessGroup: userAccessGroup,
            #phoneNumber: phoneNumber,
            #smsCode: smsCode,
            #forceRecaptchaFlow: forceRecaptchaFlow,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setPersistence(_i4.Persistence? persistence) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPersistence,
          [persistence],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i5.UserCredential> signInAnonymously() => (super.noSuchMethod(
        Invocation.method(
          #signInAnonymously,
          [],
        ),
        returnValue: _i8.Future<_i5.UserCredential>.value(_FakeUserCredential_3(
          this,
          Invocation.method(
            #signInAnonymously,
            [],
          ),
        )),
      ) as _i8.Future<_i5.UserCredential>);

  @override
  _i8.Future<_i5.UserCredential> signInWithCredential(
          _i4.AuthCredential? credential) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithCredential,
          [credential],
        ),
        returnValue: _i8.Future<_i5.UserCredential>.value(_FakeUserCredential_3(
          this,
          Invocation.method(
            #signInWithCredential,
            [credential],
          ),
        )),
      ) as _i8.Future<_i5.UserCredential>);

  @override
  _i8.Future<_i5.UserCredential> signInWithCustomToken(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithCustomToken,
          [token],
        ),
        returnValue: _i8.Future<_i5.UserCredential>.value(_FakeUserCredential_3(
          this,
          Invocation.method(
            #signInWithCustomToken,
            [token],
          ),
        )),
      ) as _i8.Future<_i5.UserCredential>);

  @override
  _i8.Future<_i5.UserCredential> signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i5.UserCredential>.value(_FakeUserCredential_3(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i5.UserCredential>);

  @override
  _i8.Future<_i5.UserCredential> signInWithEmailLink({
    required String? email,
    required String? emailLink,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailLink,
          [],
          {
            #email: email,
            #emailLink: emailLink,
          },
        ),
        returnValue: _i8.Future<_i5.UserCredential>.value(_FakeUserCredential_3(
          this,
          Invocation.method(
            #signInWithEmailLink,
            [],
            {
              #email: email,
              #emailLink: emailLink,
            },
          ),
        )),
      ) as _i8.Future<_i5.UserCredential>);

  @override
  _i8.Future<_i5.UserCredential> signInWithProvider(
          _i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithProvider,
          [provider],
        ),
        returnValue: _i8.Future<_i5.UserCredential>.value(_FakeUserCredential_3(
          this,
          Invocation.method(
            #signInWithProvider,
            [provider],
          ),
        )),
      ) as _i8.Future<_i5.UserCredential>);

  @override
  _i8.Future<_i5.ConfirmationResult> signInWithPhoneNumber(
    String? phoneNumber, [
    _i5.RecaptchaVerifier? verifier,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithPhoneNumber,
          [
            phoneNumber,
            verifier,
          ],
        ),
        returnValue:
            _i8.Future<_i5.ConfirmationResult>.value(_FakeConfirmationResult_4(
          this,
          Invocation.method(
            #signInWithPhoneNumber,
            [
              phoneNumber,
              verifier,
            ],
          ),
        )),
      ) as _i8.Future<_i5.ConfirmationResult>);

  @override
  _i8.Future<_i5.UserCredential> signInWithPopup(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithPopup,
          [provider],
        ),
        returnValue: _i8.Future<_i5.UserCredential>.value(_FakeUserCredential_3(
          this,
          Invocation.method(
            #signInWithPopup,
            [provider],
          ),
        )),
      ) as _i8.Future<_i5.UserCredential>);

  @override
  _i8.Future<void> signInWithRedirect(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithRedirect,
          [provider],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String> verifyPasswordResetCode(String? code) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyPasswordResetCode,
          [code],
        ),
        returnValue: _i8.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #verifyPasswordResetCode,
            [code],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<void> verifyPhoneNumber({
    String? phoneNumber,
    _i4.PhoneMultiFactorInfo? multiFactorInfo,
    required _i4.PhoneVerificationCompleted? verificationCompleted,
    required _i4.PhoneVerificationFailed? verificationFailed,
    required _i4.PhoneCodeSent? codeSent,
    required _i4.PhoneCodeAutoRetrievalTimeout? codeAutoRetrievalTimeout,
    String? autoRetrievedSmsCodeForTesting,
    Duration? timeout = const Duration(seconds: 30),
    int? forceResendingToken,
    _i4.MultiFactorSession? multiFactorSession,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyPhoneNumber,
          [],
          {
            #phoneNumber: phoneNumber,
            #multiFactorInfo: multiFactorInfo,
            #verificationCompleted: verificationCompleted,
            #verificationFailed: verificationFailed,
            #codeSent: codeSent,
            #codeAutoRetrievalTimeout: codeAutoRetrievalTimeout,
            #autoRetrievedSmsCodeForTesting: autoRetrievedSmsCodeForTesting,
            #timeout: timeout,
            #forceResendingToken: forceResendingToken,
            #multiFactorSession: multiFactorSession,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> revokeTokenWithAuthorizationCode(
          String? authorizationCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #revokeTokenWithAuthorizationCode,
          [authorizationCode],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i7.FirebaseFirestore {
  MockFirebaseFirestore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_1(
          this,
          Invocation.getter(#app),
        ),
      ) as _i3.FirebaseApp);

  @override
  set app(_i3.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get databaseURL => (super.noSuchMethod(
        Invocation.getter(#databaseURL),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#databaseURL),
        ),
      ) as String);

  @override
  set databaseURL(String? _databaseURL) => super.noSuchMethod(
        Invocation.setter(
          #databaseURL,
          _databaseURL,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get databaseId => (super.noSuchMethod(
        Invocation.getter(#databaseId),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#databaseId),
        ),
      ) as String);

  @override
  set databaseId(String? _databaseId) => super.noSuchMethod(
        Invocation.setter(
          #databaseId,
          _databaseId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set settings(_i6.Settings? settings) => super.noSuchMethod(
        Invocation.setter(
          #settings,
          settings,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Settings get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeSettings_5(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i6.Settings);

  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i7.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collection,
          [collectionPath],
        ),
        returnValue: _FakeCollectionReference_6<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collection,
            [collectionPath],
          ),
        ),
      ) as _i7.CollectionReference<Map<String, dynamic>>);

  @override
  _i7.WriteBatch batch() => (super.noSuchMethod(
        Invocation.method(
          #batch,
          [],
        ),
        returnValue: _FakeWriteBatch_7(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
      ) as _i7.WriteBatch);

  @override
  _i8.Future<void> clearPersistence() => (super.noSuchMethod(
        Invocation.method(
          #clearPersistence,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> enablePersistence(
          [_i6.PersistenceSettings? persistenceSettings]) =>
      (super.noSuchMethod(
        Invocation.method(
          #enablePersistence,
          [persistenceSettings],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i7.LoadBundleTask loadBundle(_i13.Uint8List? bundle) => (super.noSuchMethod(
        Invocation.method(
          #loadBundle,
          [bundle],
        ),
        returnValue: _FakeLoadBundleTask_8(
          this,
          Invocation.method(
            #loadBundle,
            [bundle],
          ),
        ),
      ) as _i7.LoadBundleTask);

  @override
  void useFirestoreEmulator(
    String? host,
    int? port, {
    bool? sslEnabled = false,
    bool? automaticHostMapping = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #useFirestoreEmulator,
          [
            host,
            port,
          ],
          {
            #sslEnabled: sslEnabled,
            #automaticHostMapping: automaticHostMapping,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i7.QuerySnapshot<T>> namedQueryWithConverterGet<T>(
    String? name, {
    _i6.GetOptions? options = const _i6.GetOptions(),
    required _i7.FromFirestore<T>? fromFirestore,
    required _i7.ToFirestore<T>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #namedQueryWithConverterGet,
          [name],
          {
            #options: options,
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue:
            _i8.Future<_i7.QuerySnapshot<T>>.value(_FakeQuerySnapshot_9<T>(
          this,
          Invocation.method(
            #namedQueryWithConverterGet,
            [name],
            {
              #options: options,
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        )),
      ) as _i8.Future<_i7.QuerySnapshot<T>>);

  @override
  _i8.Future<_i7.QuerySnapshot<Map<String, dynamic>>> namedQueryGet(
    String? name, {
    _i6.GetOptions? options = const _i6.GetOptions(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #namedQueryGet,
          [name],
          {#options: options},
        ),
        returnValue: _i8.Future<_i7.QuerySnapshot<Map<String, dynamic>>>.value(
            _FakeQuerySnapshot_9<Map<String, dynamic>>(
          this,
          Invocation.method(
            #namedQueryGet,
            [name],
            {#options: options},
          ),
        )),
      ) as _i8.Future<_i7.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i7.Query<Map<String, dynamic>> collectionGroup(String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collectionGroup,
          [collectionPath],
        ),
        returnValue: _FakeQuery_10<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collectionGroup,
            [collectionPath],
          ),
        ),
      ) as _i7.Query<Map<String, dynamic>>);

  @override
  _i8.Future<void> disableNetwork() => (super.noSuchMethod(
        Invocation.method(
          #disableNetwork,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i7.DocumentReference<Map<String, dynamic>> doc(String? documentPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #doc,
          [documentPath],
        ),
        returnValue: _FakeDocumentReference_11<Map<String, dynamic>>(
          this,
          Invocation.method(
            #doc,
            [documentPath],
          ),
        ),
      ) as _i7.DocumentReference<Map<String, dynamic>>);

  @override
  _i8.Future<void> enableNetwork() => (super.noSuchMethod(
        Invocation.method(
          #enableNetwork,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Stream<void> snapshotsInSync() => (super.noSuchMethod(
        Invocation.method(
          #snapshotsInSync,
          [],
        ),
        returnValue: _i8.Stream<void>.empty(),
      ) as _i8.Stream<void>);

  @override
  _i8.Future<T> runTransaction<T>(
    _i7.TransactionHandler<T>? transactionHandler, {
    Duration? timeout = const Duration(seconds: 30),
    int? maxAttempts = 5,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runTransaction,
          [transactionHandler],
          {
            #timeout: timeout,
            #maxAttempts: maxAttempts,
          },
        ),
        returnValue: _i12.ifNotNull(
              _i12.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runTransaction,
                  [transactionHandler],
                  {
                    #timeout: timeout,
                    #maxAttempts: maxAttempts,
                  },
                ),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_12<T>(
              this,
              Invocation.method(
                #runTransaction,
                [transactionHandler],
                {
                  #timeout: timeout,
                  #maxAttempts: maxAttempts,
                },
              ),
            ),
      ) as _i8.Future<T>);

  @override
  _i8.Future<void> terminate() => (super.noSuchMethod(
        Invocation.method(
          #terminate,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> waitForPendingWrites() => (super.noSuchMethod(
        Invocation.method(
          #waitForPendingWrites,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setIndexConfiguration({
    required List<_i6.Index>? indexes,
    List<_i6.FieldOverrides>? fieldOverrides,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIndexConfiguration,
          [],
          {
            #indexes: indexes,
            #fieldOverrides: fieldOverrides,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setIndexConfigurationFromJSON(String? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIndexConfigurationFromJSON,
          [json],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [PhoneNumberAuthenticationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhoneNumberAuthenticationUseCase extends _i1.Mock
    implements _i14.PhoneNumberAuthenticationUseCase {
  MockPhoneNumberAuthenticationUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.UserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeUserRepository_13(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i9.UserRepository);

  @override
  _i8.Future<_i2.Either<_i10.Failure, _i2.Unit>> call(
          {required String? phoneNumber}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#phoneNumber: phoneNumber},
        ),
        returnValue: _i8.Future<_i2.Either<_i10.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i10.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [],
            {#phoneNumber: phoneNumber},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i10.Failure, _i2.Unit>>);
}

/// A class which mocks [CreateUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateUserUseCase extends _i1.Mock implements _i15.CreateUserUseCase {
  MockCreateUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.UserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeUserRepository_13(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i9.UserRepository);

  @override
  _i8.Future<_i2.Either<_i10.Failure, _i2.Unit>> call(
          {required _i11.UserInfo? userInfo}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#userInfo: userInfo},
        ),
        returnValue: _i8.Future<_i2.Either<_i10.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i10.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [],
            {#userInfo: userInfo},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i10.Failure, _i2.Unit>>);
}

/// A class which mocks [SignInUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInUseCase extends _i1.Mock implements _i16.SignInUseCase {
  MockSignInUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.UserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeUserRepository_13(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i9.UserRepository);

  @override
  _i8.Future<_i2.Either<_i10.Failure, _i11.UserInfo>> call({
    required String? phoneNumber,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #phoneNumber: phoneNumber,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i10.Failure, _i11.UserInfo>>.value(
            _FakeEither_0<_i10.Failure, _i11.UserInfo>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #phoneNumber: phoneNumber,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i10.Failure, _i11.UserInfo>>);
}

/// A class which mocks [VerifyOTPUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockVerifyOTPUseCase extends _i1.Mock implements _i17.VerifyOTPUseCase {
  MockVerifyOTPUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.UserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeUserRepository_13(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i9.UserRepository);

  @override
  _i8.Future<_i2.Either<_i10.Failure, _i2.Unit>> call(
          {required String? otpCode}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#otpCode: otpCode},
        ),
        returnValue: _i8.Future<_i2.Either<_i10.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i10.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [],
            {#otpCode: otpCode},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i10.Failure, _i2.Unit>>);
}

/// A class which mocks [AppRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppRepository extends _i1.Mock implements _i18.AppRepository {
  MockAppRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set userInfo(_i11.UserInfo? _userInfo) => super.noSuchMethod(
        Invocation.setter(
          #userInfo,
          _userInfo,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set countries(_i19.CountriesEntity? _countries) => super.noSuchMethod(
        Invocation.setter(
          #countries,
          _countries,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set validators(_i20.Validators? _validators) => super.noSuchMethod(
        Invocation.setter(
          #validators,
          _validators,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set posts(List<_i21.Posts>? _posts) => super.noSuchMethod(
        Invocation.setter(
          #posts,
          _posts,
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i22.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i8.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i7.DocumentSnapshot<T> {
  MockDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i7.DocumentReference<T> get reference => (super.noSuchMethod(
        Invocation.getter(#reference),
        returnValue: _FakeDocumentReference_11<T>(
          this,
          Invocation.getter(#reference),
        ),
      ) as _i7.DocumentReference<T>);

  @override
  _i7.SnapshotMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeSnapshotMetadata_14(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i7.SnapshotMetadata);

  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
      ) as bool);

  @override
  dynamic get(Object? field) => super.noSuchMethod(Invocation.method(
        #get,
        [field],
      ));

  @override
  dynamic operator [](Object? field) => super.noSuchMethod(Invocation.method(
        #[],
        [field],
      ));
}

/// A class which mocks [UserCredential].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCredential extends _i1.Mock implements _i5.UserCredential {
  MockUserCredential() {
    _i1.throwOnMissingStub(this);
  }
}
