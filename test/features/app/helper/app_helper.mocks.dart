// Mocks generated by Mockito 5.4.4 from annotations
// in progresssoft_task/test/features/app/helper/app_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:progresssoft_task/core/error/failures.dart' as _i5;
import 'package:progresssoft_task/core/utils/repository/app_repository.dart'
    as _i13;
import 'package:progresssoft_task/features/app/data/models/countries_model.dart'
    as _i9;
import 'package:progresssoft_task/features/app/data/models/validators_model.dart'
    as _i10;
import 'package:progresssoft_task/features/app/data/services/config_service.dart'
    as _i8;
import 'package:progresssoft_task/features/app/domian/entites/countries_entity.dart'
    as _i6;
import 'package:progresssoft_task/features/app/domian/entites/validators.dart'
    as _i7;
import 'package:progresssoft_task/features/app/domian/repositories/config_repository.dart'
    as _i3;
import 'package:progresssoft_task/features/app/domian/usecases/get_all_countries.dart'
    as _i11;
import 'package:progresssoft_task/features/app/domian/usecases/get_all_validators.dart'
    as _i12;
import 'package:progresssoft_task/features/auth/domain/entites/user_info.dart'
    as _i14;
import 'package:progresssoft_task/features/main/domain/entites/posts.dart'
    as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfigRepository_1 extends _i1.SmartFake
    implements _i3.ConfigRepository {
  _FakeConfigRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ConfigRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigRepository extends _i1.Mock implements _i3.ConfigRepository {
  MockConfigRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.CountriesEntity>> getAllCountries() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllCountries,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.CountriesEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.CountriesEntity>(
          this,
          Invocation.method(
            #getAllCountries,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.CountriesEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.Validators>> getAllValidators() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllValidators,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i7.Validators>>.value(
            _FakeEither_0<_i5.Failure, _i7.Validators>(
          this,
          Invocation.method(
            #getAllValidators,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.Validators>>);
}

/// A class which mocks [FirebaseConfigService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseConfigService extends _i1.Mock
    implements _i8.FirebaseConfigService {
  MockFirebaseConfigService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i9.CountriesModel>> getAllCountries() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllCountries,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i9.CountriesModel>>.value(
                _FakeEither_0<_i5.Failure, _i9.CountriesModel>(
          this,
          Invocation.method(
            #getAllCountries,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i9.CountriesModel>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i10.ValidatorsModel>>
      getAllValidators() => (super.noSuchMethod(
            Invocation.method(
              #getAllValidators,
              [],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i10.ValidatorsModel>>.value(
                    _FakeEither_0<_i5.Failure, _i10.ValidatorsModel>(
              this,
              Invocation.method(
                #getAllValidators,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, _i10.ValidatorsModel>>);
}

/// A class which mocks [GetAllCountriesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllCountriesUseCase extends _i1.Mock
    implements _i11.GetAllCountriesUseCase {
  MockGetAllCountriesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ConfigRepository get configRepository => (super.noSuchMethod(
        Invocation.getter(#configRepository),
        returnValue: _FakeConfigRepository_1(
          this,
          Invocation.getter(#configRepository),
        ),
      ) as _i3.ConfigRepository);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.CountriesEntity>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.CountriesEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.CountriesEntity>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.CountriesEntity>>);
}

/// A class which mocks [GetAllValidatorsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllValidatorsUseCase extends _i1.Mock
    implements _i12.GetAllValidatorsUseCase {
  MockGetAllValidatorsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ConfigRepository get configRepository => (super.noSuchMethod(
        Invocation.getter(#configRepository),
        returnValue: _FakeConfigRepository_1(
          this,
          Invocation.getter(#configRepository),
        ),
      ) as _i3.ConfigRepository);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.Validators>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i7.Validators>>.value(
            _FakeEither_0<_i5.Failure, _i7.Validators>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.Validators>>);
}

/// A class which mocks [AppRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppRepository extends _i1.Mock implements _i13.AppRepository {
  MockAppRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set userInfo(_i14.UserInfo? _userInfo) => super.noSuchMethod(
        Invocation.setter(
          #userInfo,
          _userInfo,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set countries(_i6.CountriesEntity? _countries) => super.noSuchMethod(
        Invocation.setter(
          #countries,
          _countries,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set validators(_i7.Validators? _validators) => super.noSuchMethod(
        Invocation.setter(
          #validators,
          _validators,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set posts(List<_i15.Posts>? _posts) => super.noSuchMethod(
        Invocation.setter(
          #posts,
          _posts,
        ),
        returnValueForMissingStub: null,
      );
}
